name: CDCI for AWS

on:
   push:
     branches:
       - main
   pull_request:
     branches:
       - main
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2
      - run: npm install
      - name: 'Create env file'
        run: |
           echo "${{secrets.ENV_FILE_PRD }}" > .env
        # run: |
        #   echo APP_NAME=${{ vars.APP_NAME }} > .env
        #   echo PORT=${{ vars.PORT }} >> .env
        #   echo DB_TYPE=${{ vars.DB_TYPE }} >> .env
        #   echo DATABASE_HOST=${{ vars.DATABASE_HOST }} >> .env
        #   echo DATABASE_PORT=${{ vars.DATABASE_PORT }} >> .env
        #   echo DATABASE_USER=${{ vars.DATABASE_USER }} >> .env
        #   echo DATABASE_PASS=${{ secrets.DATABASE_PASS }} >> .env
        #   echo DATABASE_NAME=${{ vars.DATABASE_NAME }} >> .env
        #   echo DATABASE_MIGRATIONS_DIR=${{ vars.DATABASE_MIGRATIONS_DIR }} >> .env
        #   echo DATABASE_TIMEZONE=${{ vars.DATABASE_TIMEZONE }} >> .env
        #   echo DATABASE_AUTOLOADENTITIES=${{ vars.DATABASE_AUTOLOADENTITIES }} >> .env
        #   echo DATABASE_PGTZ=${{ vars.DATABASE_PGTZ }} >> .env
        #   echo DB_TIMEOUT=${{ vars.DB_TIMEOUT }} >> .env
        #   echo GRAPHQL_DEGUB=${{ vars.GRAPHQL_DEGUB }} >> .env
        #   echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
        #   echo GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }} >> .env
        #   echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
        #   echo FACEBOOK_CLIENT_ID=${{ vars.FACEBOOK_CLIENT_ID }} >> .env
        #   echo FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }} >> .env
      - run: npm run test:e2e
      - run: npm run build
      - run: |
          mv package-lock.json package.json .env dist/ 
          cd dist
          npm install --production
      # - name: Deploy in EC2
      #   run: |
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key
      #     ssh -o StrictHostKeyChecking=no -i private_key ubuntu@3.93.56.43

      #      cd /var/www/my-app/
      #      touch index.html
      - name: rsync deployments
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: ./dist
          remote_path: /var/www/my-app/
          remote_host: 3.93.56.43
          remote_user: ubuntu
          remote_key: "${{ secrets.SSH_PRIVATE_KEY }}"
           


